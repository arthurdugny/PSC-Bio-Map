from skimage import io
from matplotlib import pyplot as plt
from skimage.feature import canny
from skimage.util import crop
from skimage.exposure import rescale_intensity

from skimage.measure import label, regionprops, regionprops_table
import pandas as pd
import numpy as np


#Ouverture des N = 10 vidéos à analyser
for j in range(1,11):
    nom_video = "M_0"
    if j<10:
        nom_video = nom_video + "0" + str(j)
    else:
        nom_video = nom_video + "10"

    nb_photo = 139
    nom_photo = r"C:\Users\Babo\Documents\Polytechnique\PSC\Vidéos\M_001\M_001_"
    donnees = {}

    #Ouverture de chaque frame 
    for k in range (1,nb_photo+1):
        if k<10:
            nom_de_photo = nom_photo + '00'+str(k)+".jpg"
        elif 10<=k and k<100:
            nom_de_photo = nom_photo + '0'+str(k)+".jpg"
        else:
            nom_de_photo = nom_photo + str(k)+".jpg"
        
        img = io.imread(nom_de_photo,as_gray = True)
        
        #on coupe les côtés des images
        img = crop(img,((30,30),(0,10)), copy=False, order='K') 
        
        #traitement de l'image
        v_min, v_max = np.percentile(img, (0.2, 90))
        img2 = rescale_intensity(img, in_range=(v_min, v_max))
        edge_canny = canny(img2,sigma = 2.9)
        
        
        #plt.imshow(edge_canny)
        #plt.show()
        
        
        #Tirer les données
        label_img = label(edge_canny)
        #regions = regionprops(label_img)
        props = regionprops_table(label_img,properties=('label', 'coords','perimeter'))
        df=pd.DataFrame(props)
        
        df = df.sort_values(by="perimeter") #on trie par ordre croissant des perimètres les lignes du tableau
        df = df.tail(2) # on garde les deux dernières = celles d'intérêt


        #tri des coordonnées des points selon l'abcsisse croissante:
            
        #Extraire les coordonnées de la première composante connexe
        coords = df.iloc[0]["coords"]
        coords2 = df.iloc[1]["coords"]
        
        #Trier les coordonnées par abscisse croissante (x = colonne)
        coords_sorted = sorted(coords, key=lambda c: c[1])
        coords_sorted2 = sorted(coords2, key=lambda c: c[1])
        
        #Remettre à jour dans le DataFrame si besoin
        if coords_sorted[0][0] > coords_sorted2[0][0]
            df.at[df.index[0], "coords"] = coords_sorted
            df.at[df.index[1], "coords"] = coords_sorted2
        else :
            df.at[df.index[0], "coords"] = coords_sorted2
            df.at[df.index[1], "coords"] = coords_sorted
            df['perimeter'][0], df[perimeter'][1] = df['perimeter'][1], df[perimeter'][0]
        
        #contrôle visuel
        coordon = df.head(1)['coords'].iloc[0]
        
        lx = []
        ly = []
        lx2 = []
        ly2 = []
        
        for k in range (len(coordon)):
            ly.append(coordon[k][0])
            lx.append(coordon[k][1])
            
        coordon2 = df.tail(1)['coords'].iloc[0]
            
        for k in range (len(coordon2)):
            ly2.append(coordon2[k][0])
            lx2.append(coordon2[k][1])
            
        plt.plot(lx,ly,'b.')
        plt.plot(lx2,ly2,'r.')
    
        plt.show()
        
